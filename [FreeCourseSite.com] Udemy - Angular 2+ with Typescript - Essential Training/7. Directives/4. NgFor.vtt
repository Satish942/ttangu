WEBVTT
Kind: captions
Language: en

00:00:01.390 --> 00:00:07.310
The next structural directive we’re going
to look at is the NgFor directive.

00:00:07.310 --> 00:00:13.380
The NgFor directive instantiates a template
once per item from an iterable.

00:00:13.380 --> 00:00:19.519
This means when we loop through a list which
can be either an array or object, we’ll

00:00:19.519 --> 00:00:27.359
then display each value in a template that
repeats itself for all values in the list.

00:00:27.359 --> 00:00:34.480
When using NgFor in our template we start
with an asterisk followed by ngFor equaling

00:00:34.480 --> 00:00:35.940
our expression.

00:00:35.940 --> 00:00:38.260
The expression has 2 components.

00:00:38.260 --> 00:00:41.660
The first defines a variable to iterate over.

00:00:41.660 --> 00:00:46.660
We use the ES6 version of the variable keyword
known as let here.

00:00:46.660 --> 00:00:50.629
And the variable name we’re creating is
called book.

00:00:50.629 --> 00:00:56.870
Then we use the keyword of as our iterator,
with books representing the list.

00:00:56.870 --> 00:01:03.710
You will commonly see ngFor used inside of
a table row in order to create multiple rows.

00:01:03.710 --> 00:01:09.290
However, we can create multiple anything including
divs and spans.

00:01:09.290 --> 00:01:15.740
In this example we’re using our assigned
variable book then dot notation to grab the

00:01:15.740 --> 00:01:18.750
values from our list of books.

00:01:18.750 --> 00:01:24.670
Normally we’re grabbing this data from an
API or database but if we created a list of

00:01:24.670 --> 00:01:29.250
books in our component this is what it would
look like.

00:01:29.250 --> 00:01:36.490
Lets now practice adding a list of books to
our application using the NgFor directive.

00:01:36.490 --> 00:01:42.960
So going into our books-list.component html
file I’ll first add in our ngFor loop.

00:01:42.960 --> 00:01:47.119
Setting it equal to let book of books.

00:01:47.119 --> 00:01:53.119
Then to change around my binding I’m simply
going to add our book variable as a prefix

00:01:53.119 --> 00:01:55.899
to each one of our bindings.

00:01:55.899 --> 00:02:04.229
Now I’m going to go into my component and
I’m going to change each one of these hardcoded

00:02:04.229 --> 00:02:09.320
book properties into an array of objects with
the same values.

00:02:09.320 --> 00:02:15.310
I can do this by creating an array with the
name of books that is going to be of type

00:02:15.310 --> 00:02:21.379
any and equal to an array of objects.

00:02:21.379 --> 00:02:29.620
Then I’m just going to copy over each of
these properties.

00:02:29.620 --> 00:02:39.940
And making sure to remove each one of the
declared types along with the equal signs

00:02:39.940 --> 00:02:43.540
and then changing the semicolons into commas.

00:02:43.540 --> 00:02:52.070
Now, when we save these files and refresh
our app you can see that everything looks

00:02:52.070 --> 00:02:57.470
the same as before, meaning our ngFor directive
is working as expected.

00:02:57.470 --> 00:03:03.230
We’re only seeing the one book being shown
here since we’ve only created one object

00:03:03.230 --> 00:03:04.790
in our books array.

00:03:04.790 --> 00:03:11.500
To get a better idea of this directive in
action, lets add one more book to our array

00:03:11.500 --> 00:03:16.780
by just copying over the contents of our first
book.

00:03:16.780 --> 00:03:25.950
I’ll save this file and on refresh you can
see we now have 2 books shown.

00:03:25.950 --> 00:03:31.150
So this should give you an example of how
easy it is to loop through and display whatever

00:03:31.150 --> 00:03:33.620
data that we need to on our page.

00:03:33.620 --> 00:03:39.239
We’ll conclude our discussion of directives
with an example of how to use the NgClass

00:03:39.239 --> 00:03:39.999
directive.

