WEBVTT

00:00:01.329 --> 00:00:05.640
In the next few videos we’re going to be
going a little more in depth exploring what

00:00:05.640 --> 00:00:08.350
interfaces are and how we can use them.

00:00:08.350 --> 00:00:13.871
I mentioned at the beginning that interfaces
are a feature of Typescript as opposed to

00:00:13.871 --> 00:00:14.929
Angular 2.

00:00:14.929 --> 00:00:19.650
So what you’ll see is a lot of the source
code in Angular 2 is written as a typescript

00:00:19.650 --> 00:00:21.130
interface.

00:00:21.130 --> 00:00:25.430
If we navigate over to the angular docs, then
click on this API reference.

00:00:25.430 --> 00:00:29.150
We’re presented with some icons here to
sort by.

00:00:29.150 --> 00:00:31.820
One of these options is Interface.

00:00:31.820 --> 00:00:37.970
Clicking on this icon brings us a list of
all the API methods written as an interface.

00:00:37.970 --> 00:00:41.870
One of these is called PipeTransform and its
one that we’ve already used.

00:00:41.870 --> 00:00:46.020
Do you remember how we used PipeTransform?

00:00:46.020 --> 00:00:48.760
We imported the file from angular core.

00:00:48.760 --> 00:00:51.869
Then we implemented it within our class.

00:00:51.869 --> 00:00:57.420
We used the keyword implement as a way to
access properties and methods within this

00:00:57.420 --> 00:00:59.480
PipeTransform.

00:00:59.480 --> 00:01:05.580
Lets now practice building and using interfaces
by creating a Book interface inside of our

00:01:05.580 --> 00:01:07.970
booklist component.

00:01:07.970 --> 00:01:12.940
Opening up my books-list component file, I’m
going to create an interface for our books

00:01:12.940 --> 00:01:13.940
below.

00:01:13.940 --> 00:01:19.950
I’m going to define my Book interface directly
in this file just for demonstration purposes.

00:01:19.950 --> 00:01:25.190
When adding an interface in this way we need
to add it above our component decorator.

00:01:25.190 --> 00:01:30.590
I’ll first use my interface keyword and
then the name of my new interface which is

00:01:30.590 --> 00:01:34.180
IBook followed by curly braces.

00:01:34.180 --> 00:01:35.750
Now lets define our properties.

00:01:35.750 --> 00:01:43.200
I’m going to just copy over the properties
we’ve already defined in our array of books.

00:01:43.200 --> 00:01:46.250
Then change around the values to their respective
type

00:01:46.250 --> 00:01:59.060
remembering to change the comma here to a
semicolon.

00:01:59.060 --> 00:02:05.520
And now I can change this books which is currently
defined as type any to the type of my interface

00:02:05.520 --> 00:02:09.660
which is IBook.

00:02:09.660 --> 00:02:16.410
Everything works the same, except that we’re
using strong typing to define our books array.

00:02:16.410 --> 00:02:22.490
As a result, if I were to change my reviews
value to a string I’ll get a squiggly line

00:02:22.490 --> 00:02:23.910
error.

00:02:23.910 --> 00:02:29.459
Also, if I were to add an additional property
that’s not already set in our interface

00:02:29.459 --> 00:02:34.950
– such as the property hardcover and set
it to false – I’ll get a squiggly line

00:02:34.950 --> 00:02:37.380
error just on that line.

00:02:37.380 --> 00:02:41.260
There may be times when we don’t know whether
or not a we’re going to be getting back

00:02:41.260 --> 00:02:42.340
a piece of data.

00:02:42.340 --> 00:02:48.120
In these cases, we can use the question mark
symbol after our property key.

00:02:48.120 --> 00:02:55.130
So to demonstrate, we’ll add a hardcover
property followed by a question mark that’s

00:02:55.130 --> 00:02:56.500
of type boolean.

00:02:56.500 --> 00:03:01.569
Now, it doesn’t matter whether or not we
declare our hardcover property within our

00:03:01.569 --> 00:03:03.200
books array.

00:03:03.200 --> 00:03:08.349
We can delete the property definition and
we won’t be getting any errors.

00:03:08.349 --> 00:03:13.110
Now that we’ve seen how to use interfaces
as a source for strong typing, lets see a

00:03:13.110 --> 00:03:16.569
more real world example where we export our
interface.