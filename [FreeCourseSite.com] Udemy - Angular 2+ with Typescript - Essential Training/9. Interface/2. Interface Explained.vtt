WEBVTT
Kind: captions
Language: en

00:00:01.469 --> 00:00:08.220
Interfaces are used within typescript in order
to define the data types for a grouping of

00:00:08.220 --> 00:00:11.420
properties and methods.

00:00:11.420 --> 00:00:14.150
Here is an example of an interface.

00:00:14.150 --> 00:00:20.070
We are typically going to be exporting the
interface so we can use it in other files.

00:00:20.070 --> 00:00:25.329
Then we use the interface keyword, followed
by an appropriate name.

00:00:25.329 --> 00:00:30.759
The name is usually in Pascale Casing and
prefixed with the letter I.

00:00:30.759 --> 00:00:36.360
Inside of our interface we’ve defined properties
with their data types.

00:00:36.360 --> 00:00:41.820
This is the same as when we define properties
inside a class, except here we’re not setting

00:00:41.820 --> 00:00:46.650
it equal to anything – we’re only defining
the properties type.

00:00:46.650 --> 00:00:49.230
And here we’ve defined a method.

00:00:49.230 --> 00:00:55.300
We’ve included the name of the method, any
parameters along with their data types, and

00:00:55.300 --> 00:01:01.660
the return type which in this case is of type
void since nothing is being returned.

00:01:01.660 --> 00:01:07.970
Also notice how we’re using semi-colons
at the end of every property and method definition.

00:01:07.970 --> 00:01:14.690
Interfaces essentially create a contract between
the data and its defined type.

00:01:14.690 --> 00:01:20.060
If at any time this contract is not being
adhered to, we’ll receive an error in our

00:01:20.060 --> 00:01:25.280
editor usually in the form of a red squiggly
line.

00:01:25.280 --> 00:01:31.850
So the pupose of interfaces is to provide
us with strong typing for groupings of properties

00:01:31.850 --> 00:01:39.729
and methods which creates better tooling support
as we build, debug and maintain our code.

00:01:39.729 --> 00:01:46.760
This means that interfaces and strong typing
in general are development time features.

00:01:46.760 --> 00:01:51.460
So that when your actually your running your
application, you won’t be getting any console

00:01:51.460 --> 00:01:57.520
or browser errors if the data that your displaying
doesn’t match your defined interface types.

00:01:57.520 --> 00:02:01.050
You’ll just get potentially unexpected results.

